name: CI Pipeline with Railway Staging Deployment

on:
  push:
    branches:
      - master  # Run this workflow on PRs targeting the master branch

jobs:
  deploy-and-test:
    name: Deploy to Staging and Test API
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code
      - uses: actions/checkout@v2

      # Step 2: Install Railway CLI
      - name: Install Railway CLI via npm
        run: npm install -g @railway/cli

      # Step 3: Link to the Railway Project and Service
      - name: Link Railway Project
        env:
          RAILWAY_API_TOKEN: ${{ secrets.RAILWAY_API_TOKEN }}
        run: |
          railway link --project ${{ secrets.RAILWAY_PROJECT_ID }} --service ${{ secrets.RAILWAY_SERVICE_ID }}

      # Step 4: Deploy the PR branch to the staging environment
      - name: Deploy to Railway Staging
        env:
          RAILWAY_API_TOKEN: ${{ secrets.RAILWAY_API_TOKEN }}
        run: |
          railway up --ci -- --branch ${{ github.head_ref }} --environment staging

      # Step 5: Wait for the deployment to complete (customize this as needed)
      - name: Wait for deployment
        run: sleep 30  # Increase this if the deployment takes longer

      # Step 6: Get the URL of the staging environment
      - name: Get Staging Environment URL
        id: get-url
        env:
          RAILWAY_API_TOKEN: ${{ secrets.RAILWAY_API_TOKEN }}
        run: |
          RAILWAY_URL=$(railway status --json | jq -r '.service.environments[] | select(.name=="staging").url')
          echo "Staging URL: $RAILWAY_URL"
          echo "::set-output name=staging_url::$RAILWAY_URL"

      # Step 7: Test API Endpoints on the Staging Environment
      - name: Test API Endpoints
        run: |
          echo "Testing API at ${{ steps.get-url.outputs.staging_url }}"
          curl -f ${{ steps.get-url.outputs.staging_url }}/api/health || exit 1
          curl -f ${{ steps.get-url.outputs.staging_url }}/api/users || exit 1
